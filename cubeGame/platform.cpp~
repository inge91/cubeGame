#include "StdAfx.h"
#include "platform.h"
#include "cube.h"


Platform::Platform(Cube *c)
{
	mc = c;
	// Size of the panels sould be as big as the cube is
	msize = mc->msize;
	
	mminx = -14;
	mmaxz = 14;
prepare_level();
}

//TODO: Read from file
void Platform::prepare_level()
{

	ifstream myfile ("level1.txt");
	//myfile.open("level1.txt", ios::out);

	string line1;
	string line2;
	string line3;
	string line4;
	string line5;
	string line6; 
	string line7;

	getline(myfile,line1);
	getline(myfile,line2);
	getline(myfile,line3);
	getline(myfile,line4);
	getline(myfile,line5);
	getline(myfile,line6);
	getline(myfile,line7);

    cout << line1 << endl;
    cout << line7 << endl;

	int mrow1[7];
	int mrow2[7];
	int mrow3[7];
	int mrow4[7];
	int mrow5[7];
	int mrow6[7];
	int mrow7[7];
	
	mrow1[0] = atoi((const char*) line7[0]);
	mrow1[1] = EMPTY;
	mrow1[2] = EMPTY;
	mrow1[3] = EMPTY;
	mrow1[4] = EMPTY;
	mrow1[5] = EMPTY;
	mrow1[6] = END;

	mrow2[0] = ONE;
	mrow2[1] = EMPTY;
	mrow2[2] = EMPTY;
	mrow2[3] = EMPTY;
	mrow2[4] = EMPTY;
	mrow2[5] = EMPTY;
	mrow2[6] = ONE;

	mrow3[0] = ONE;
	mrow3[1] = EMPTY;
	mrow3[2] = EMPTY;
	mrow3[3] = EMPTY;
	mrow3[4] = EMPTY;
	mrow3[5] = EMPTY;
	mrow3[6] = ONE;

	mrow4[0] = ONE;
	mrow4[1] = ONE;
	mrow4[2] = ONE;
	mrow4[3] = ONE;
	mrow4[4] = ONE;
	mrow4[5] = ONE;
	mrow4[6] = ONE;

	mrow5[0] = EMPTY;
	mrow5[1] = EMPTY;
	mrow5[2] = EMPTY;
	mrow5[3] = EMPTY;
	mrow5[4] = EMPTY;
	mrow5[5] = EMPTY;
	mrow5[6] = EMPTY;

	mrow6[0] = EMPTY;
	mrow6[1] = EMPTY;
	mrow6[2] = EMPTY;
	mrow6[3] = EMPTY;
	mrow6[4] = EMPTY;
	mrow6[5] = EMPTY;
	mrow6[6] = EMPTY;
	
	mrow7[0] = EMPTY;
	mrow7[1] = EMPTY;
	mrow7[2] = EMPTY;
	mrow7[3] = EMPTY;
	mrow7[4] = EMPTY;
	mrow7[5] = EMPTY;
	mrow7[6] = EMPTY;

	// Fill the whole playing field
	for(int j = 0; j < 7; j++)
	{
		mlevel[0][j] = mrow1[j];
		mlevel[1][j] = mrow2[j];
		mlevel[2][j] = mrow3[j];
		mlevel[3][j] = mrow4[j];
		mlevel[4][j] = mrow5[j];
		mlevel[5][j] = mrow6[j];
		mlevel[6][j] = mrow7[j];

	}
	mc->change_position(-3, 3);
}


void Platform::draw_level()
{
	int position;
	//mrow1 = mlevel.pop_back();
	glBegin(GL_QUADS);

	// Draw the board pane for pane
	for(int i =0; i < 7; i++){

		for( int j = 0; j < 7; j++){

			position = mlevel[i][j];	
			
			switch(position)
			{
			case EMPTY:
				continue;
			case ONE:
				glColor3f(0.7, 0.7, 0.7);
				break;
			case TWO:
				glColor3f(0.5, 0.5, 0);
				break;
			case THREE:
				glColor3f(0.6, 0.2, 0);
				break;
			case START:
				glColor3f(0.5, 1, 0);
				break;
			case END:
				glColor3f(0.0, 0.5, 0.8);
				break;
			}

			glVertex3f(mminx + (j *msize*2), -msize, mmaxz - (i*msize*2));
			glVertex3f(mminx + ((j+1)*msize*2), -msize, mmaxz - (i* msize*2));
			glVertex3f(mminx + ((j +1)*msize*2), -msize, mmaxz - ((i+1) *2*msize));
			glVertex3f(mminx + (j *msize*2), -msize, mmaxz - ((i+1) *2*msize));
		}
	}

	glEnd();

}

// Update the game state
void Platform::update(){
	int x = mc->mposx +3;
	int y; 
	if(mc->mposz >0)
	{
		y = -mc->mposz + 3;
	}
	else
	{
		y = mc->mposz + 3;
	}

	int position = mlevel[y][x];
	
	// artificially change the position if outside area
	if(x < 0 || x > 6 || y > 6 || y < 0)
	{
		position = EMPTY;
	}

	switch(position){
	// Cube died
	case EMPTY:
		prepare_level();
		break;
	case END:
		std::cout<<"Won level";
		break;
	}



	// No movement has occured, don't change anything
	if(mc->mposx == mc->mprevx && mc->mposz == mc->mprevz)
	{
		// Nothing
	}
	else
	{
		int j = mc->mprevx +3;
		int i; 
		if(mc->mprevz >0)
		{

			i = -mc->mprevz + 3;
		}
		else
		{
			i = mc->mprevz + 3;
		}

		int prev_position = mlevel[i][j];

		switch(prev_position)
		{
			case EMPTY:
			//Should never occur
			break;
			case ONE:
			case TWO:
			case THREE:
				mlevel[i][j] = prev_position -1;
				break;
		}
		// Set them alike for unnecessary double checking
		mc->mprevx = mc->mposx;
		mc->mprevz = mc->mposz;
	}
	
}


